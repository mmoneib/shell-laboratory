#!/bin/sh
################################################################################
# ~title of script here!~                                                      #
#                                                                              #
# ~extensive description of script here~                                       #
#                                                                              #
# Type: Progressive Process.                                                   #
# Dependencies: Unix-like Shell (tested with Bash)                             #
#     ~additional dependenies here~                                            #
# Developed by: Muhammad Moneib                                                #
################################################################################

# Namspaces: c for config, d for data, and o for output.

function __print_incorrect_parameter_value_error {
  echo "Validation Error: The provided value $1 is not supported by this parameter $2. Please check Help for more info.">&2
  exit 1
}

function __print_usage {  
  sh $(dirname $0)/help__actions.sh -a print_process_usage -t $0
  exit
}

function __print_help {
  sh $(dirname $0)/help__actions.sh -a print_process_help -t $0
  exit
}

function initialize_input {
  if [ -z $1 ]; then # Case of no options at all.
    __print_usage
  fi
  ~c_ variables defaults here~
  while getopts "h~getopts parameter string here" o; do
    case "$o" in
    ~description of parameter here~
    ~parameter character here~) ~c_ parameter variable (immutable) here~=$OPTARG ;;
    h) __print_help ;;
    *) __print_usage ;;
    esac
  done
  ~options validation here~
  ~d_ variables (mutable by process_data) initialization here~
  ~o_ variables (immutable) initialization here~
  ~hooks for adding a certain behaviour at a specific event (like trapping EXIT to clear)~
}

function process_data {
  ~processing of data here~
  output
  ~processing of data continued here~
  ~o_ variables initialization here~
}

function pretty_output {
  ~human readable and formatted output here~
}

function raw_output {
  ~plain data structural output here~
}

function output {
  if [ $c_isRawOutput ]; then
    raw_output
  else
    pretty_output
  fi
}

initialize_input "$@"
process_data
